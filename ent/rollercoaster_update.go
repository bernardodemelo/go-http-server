// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"http-go/ent/predicate"
	"http-go/ent/rollercoaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RollerCoasterUpdate is the builder for updating RollerCoaster entities.
type RollerCoasterUpdate struct {
	config
	hooks    []Hook
	mutation *RollerCoasterMutation
}

// Where appends a list predicates to the RollerCoasterUpdate builder.
func (rcu *RollerCoasterUpdate) Where(ps ...predicate.RollerCoaster) *RollerCoasterUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetName sets the "name" field.
func (rcu *RollerCoasterUpdate) SetName(s string) *RollerCoasterUpdate {
	rcu.mutation.SetName(s)
	return rcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcu *RollerCoasterUpdate) SetNillableName(s *string) *RollerCoasterUpdate {
	if s != nil {
		rcu.SetName(*s)
	}
	return rcu
}

// SetLocation sets the "location" field.
func (rcu *RollerCoasterUpdate) SetLocation(s string) *RollerCoasterUpdate {
	rcu.mutation.SetLocation(s)
	return rcu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (rcu *RollerCoasterUpdate) SetNillableLocation(s *string) *RollerCoasterUpdate {
	if s != nil {
		rcu.SetLocation(*s)
	}
	return rcu
}

// SetHeight sets the "height" field.
func (rcu *RollerCoasterUpdate) SetHeight(f float64) *RollerCoasterUpdate {
	rcu.mutation.ResetHeight()
	rcu.mutation.SetHeight(f)
	return rcu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (rcu *RollerCoasterUpdate) SetNillableHeight(f *float64) *RollerCoasterUpdate {
	if f != nil {
		rcu.SetHeight(*f)
	}
	return rcu
}

// AddHeight adds f to the "height" field.
func (rcu *RollerCoasterUpdate) AddHeight(f float64) *RollerCoasterUpdate {
	rcu.mutation.AddHeight(f)
	return rcu
}

// SetSpeed sets the "speed" field.
func (rcu *RollerCoasterUpdate) SetSpeed(f float64) *RollerCoasterUpdate {
	rcu.mutation.ResetSpeed()
	rcu.mutation.SetSpeed(f)
	return rcu
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (rcu *RollerCoasterUpdate) SetNillableSpeed(f *float64) *RollerCoasterUpdate {
	if f != nil {
		rcu.SetSpeed(*f)
	}
	return rcu
}

// AddSpeed adds f to the "speed" field.
func (rcu *RollerCoasterUpdate) AddSpeed(f float64) *RollerCoasterUpdate {
	rcu.mutation.AddSpeed(f)
	return rcu
}

// Mutation returns the RollerCoasterMutation object of the builder.
func (rcu *RollerCoasterUpdate) Mutation() *RollerCoasterMutation {
	return rcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RollerCoasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RollerCoasterUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RollerCoasterUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RollerCoasterUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcu *RollerCoasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rollercoaster.Table, rollercoaster.Columns, sqlgraph.NewFieldSpec(rollercoaster.FieldID, field.TypeInt))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Name(); ok {
		_spec.SetField(rollercoaster.FieldName, field.TypeString, value)
	}
	if value, ok := rcu.mutation.Location(); ok {
		_spec.SetField(rollercoaster.FieldLocation, field.TypeString, value)
	}
	if value, ok := rcu.mutation.Height(); ok {
		_spec.SetField(rollercoaster.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := rcu.mutation.AddedHeight(); ok {
		_spec.AddField(rollercoaster.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := rcu.mutation.Speed(); ok {
		_spec.SetField(rollercoaster.FieldSpeed, field.TypeFloat64, value)
	}
	if value, ok := rcu.mutation.AddedSpeed(); ok {
		_spec.AddField(rollercoaster.FieldSpeed, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rollercoaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RollerCoasterUpdateOne is the builder for updating a single RollerCoaster entity.
type RollerCoasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RollerCoasterMutation
}

// SetName sets the "name" field.
func (rcuo *RollerCoasterUpdateOne) SetName(s string) *RollerCoasterUpdateOne {
	rcuo.mutation.SetName(s)
	return rcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcuo *RollerCoasterUpdateOne) SetNillableName(s *string) *RollerCoasterUpdateOne {
	if s != nil {
		rcuo.SetName(*s)
	}
	return rcuo
}

// SetLocation sets the "location" field.
func (rcuo *RollerCoasterUpdateOne) SetLocation(s string) *RollerCoasterUpdateOne {
	rcuo.mutation.SetLocation(s)
	return rcuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (rcuo *RollerCoasterUpdateOne) SetNillableLocation(s *string) *RollerCoasterUpdateOne {
	if s != nil {
		rcuo.SetLocation(*s)
	}
	return rcuo
}

// SetHeight sets the "height" field.
func (rcuo *RollerCoasterUpdateOne) SetHeight(f float64) *RollerCoasterUpdateOne {
	rcuo.mutation.ResetHeight()
	rcuo.mutation.SetHeight(f)
	return rcuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (rcuo *RollerCoasterUpdateOne) SetNillableHeight(f *float64) *RollerCoasterUpdateOne {
	if f != nil {
		rcuo.SetHeight(*f)
	}
	return rcuo
}

// AddHeight adds f to the "height" field.
func (rcuo *RollerCoasterUpdateOne) AddHeight(f float64) *RollerCoasterUpdateOne {
	rcuo.mutation.AddHeight(f)
	return rcuo
}

// SetSpeed sets the "speed" field.
func (rcuo *RollerCoasterUpdateOne) SetSpeed(f float64) *RollerCoasterUpdateOne {
	rcuo.mutation.ResetSpeed()
	rcuo.mutation.SetSpeed(f)
	return rcuo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (rcuo *RollerCoasterUpdateOne) SetNillableSpeed(f *float64) *RollerCoasterUpdateOne {
	if f != nil {
		rcuo.SetSpeed(*f)
	}
	return rcuo
}

// AddSpeed adds f to the "speed" field.
func (rcuo *RollerCoasterUpdateOne) AddSpeed(f float64) *RollerCoasterUpdateOne {
	rcuo.mutation.AddSpeed(f)
	return rcuo
}

// Mutation returns the RollerCoasterMutation object of the builder.
func (rcuo *RollerCoasterUpdateOne) Mutation() *RollerCoasterMutation {
	return rcuo.mutation
}

// Where appends a list predicates to the RollerCoasterUpdate builder.
func (rcuo *RollerCoasterUpdateOne) Where(ps ...predicate.RollerCoaster) *RollerCoasterUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RollerCoasterUpdateOne) Select(field string, fields ...string) *RollerCoasterUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RollerCoaster entity.
func (rcuo *RollerCoasterUpdateOne) Save(ctx context.Context) (*RollerCoaster, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RollerCoasterUpdateOne) SaveX(ctx context.Context) *RollerCoaster {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RollerCoasterUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RollerCoasterUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcuo *RollerCoasterUpdateOne) sqlSave(ctx context.Context) (_node *RollerCoaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(rollercoaster.Table, rollercoaster.Columns, sqlgraph.NewFieldSpec(rollercoaster.FieldID, field.TypeInt))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RollerCoaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rollercoaster.FieldID)
		for _, f := range fields {
			if !rollercoaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rollercoaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Name(); ok {
		_spec.SetField(rollercoaster.FieldName, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.Location(); ok {
		_spec.SetField(rollercoaster.FieldLocation, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.Height(); ok {
		_spec.SetField(rollercoaster.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := rcuo.mutation.AddedHeight(); ok {
		_spec.AddField(rollercoaster.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := rcuo.mutation.Speed(); ok {
		_spec.SetField(rollercoaster.FieldSpeed, field.TypeFloat64, value)
	}
	if value, ok := rcuo.mutation.AddedSpeed(); ok {
		_spec.AddField(rollercoaster.FieldSpeed, field.TypeFloat64, value)
	}
	_node = &RollerCoaster{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rollercoaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
