// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"http-go/ent/rollercoaster"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RollerCoaster is the model entity for the RollerCoaster schema.
type RollerCoaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Height holds the value of the "height" field.
	Height float64 `json:"height,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed        float64 `json:"speed,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RollerCoaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rollercoaster.FieldHeight, rollercoaster.FieldSpeed:
			values[i] = new(sql.NullFloat64)
		case rollercoaster.FieldID:
			values[i] = new(sql.NullInt64)
		case rollercoaster.FieldName, rollercoaster.FieldLocation:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RollerCoaster fields.
func (rc *RollerCoaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rollercoaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rc.ID = int(value.Int64)
		case rollercoaster.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rc.Name = value.String
			}
		case rollercoaster.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				rc.Location = value.String
			}
		case rollercoaster.FieldHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				rc.Height = value.Float64
			}
		case rollercoaster.FieldSpeed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				rc.Speed = value.Float64
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RollerCoaster.
// This includes values selected through modifiers, order, etc.
func (rc *RollerCoaster) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// Update returns a builder for updating this RollerCoaster.
// Note that you need to call RollerCoaster.Unwrap() before calling this method if this RollerCoaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RollerCoaster) Update() *RollerCoasterUpdateOne {
	return NewRollerCoasterClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RollerCoaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RollerCoaster) Unwrap() *RollerCoaster {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RollerCoaster is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RollerCoaster) String() string {
	var builder strings.Builder
	builder.WriteString("RollerCoaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("name=")
	builder.WriteString(rc.Name)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(rc.Location)
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", rc.Height))
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(fmt.Sprintf("%v", rc.Speed))
	builder.WriteByte(')')
	return builder.String()
}

// RollerCoasters is a parsable slice of RollerCoaster.
type RollerCoasters []*RollerCoaster
