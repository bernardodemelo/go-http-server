// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"http-go/ent/rollercoaster"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RollerCoasterCreate is the builder for creating a RollerCoaster entity.
type RollerCoasterCreate struct {
	config
	mutation *RollerCoasterMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rcc *RollerCoasterCreate) SetName(s string) *RollerCoasterCreate {
	rcc.mutation.SetName(s)
	return rcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcc *RollerCoasterCreate) SetNillableName(s *string) *RollerCoasterCreate {
	if s != nil {
		rcc.SetName(*s)
	}
	return rcc
}

// SetLocation sets the "location" field.
func (rcc *RollerCoasterCreate) SetLocation(s string) *RollerCoasterCreate {
	rcc.mutation.SetLocation(s)
	return rcc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (rcc *RollerCoasterCreate) SetNillableLocation(s *string) *RollerCoasterCreate {
	if s != nil {
		rcc.SetLocation(*s)
	}
	return rcc
}

// SetHeight sets the "height" field.
func (rcc *RollerCoasterCreate) SetHeight(f float64) *RollerCoasterCreate {
	rcc.mutation.SetHeight(f)
	return rcc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (rcc *RollerCoasterCreate) SetNillableHeight(f *float64) *RollerCoasterCreate {
	if f != nil {
		rcc.SetHeight(*f)
	}
	return rcc
}

// SetSpeed sets the "speed" field.
func (rcc *RollerCoasterCreate) SetSpeed(f float64) *RollerCoasterCreate {
	rcc.mutation.SetSpeed(f)
	return rcc
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (rcc *RollerCoasterCreate) SetNillableSpeed(f *float64) *RollerCoasterCreate {
	if f != nil {
		rcc.SetSpeed(*f)
	}
	return rcc
}

// Mutation returns the RollerCoasterMutation object of the builder.
func (rcc *RollerCoasterCreate) Mutation() *RollerCoasterMutation {
	return rcc.mutation
}

// Save creates the RollerCoaster in the database.
func (rcc *RollerCoasterCreate) Save(ctx context.Context) (*RollerCoaster, error) {
	rcc.defaults()
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RollerCoasterCreate) SaveX(ctx context.Context) *RollerCoaster {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RollerCoasterCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RollerCoasterCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *RollerCoasterCreate) defaults() {
	if _, ok := rcc.mutation.Name(); !ok {
		v := rollercoaster.DefaultName
		rcc.mutation.SetName(v)
	}
	if _, ok := rcc.mutation.Location(); !ok {
		v := rollercoaster.DefaultLocation
		rcc.mutation.SetLocation(v)
	}
	if _, ok := rcc.mutation.Height(); !ok {
		v := rollercoaster.DefaultHeight
		rcc.mutation.SetHeight(v)
	}
	if _, ok := rcc.mutation.Speed(); !ok {
		v := rollercoaster.DefaultSpeed
		rcc.mutation.SetSpeed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RollerCoasterCreate) check() error {
	if _, ok := rcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RollerCoaster.name"`)}
	}
	if _, ok := rcc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "RollerCoaster.location"`)}
	}
	if _, ok := rcc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "RollerCoaster.height"`)}
	}
	if _, ok := rcc.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`ent: missing required field "RollerCoaster.speed"`)}
	}
	return nil
}

func (rcc *RollerCoasterCreate) sqlSave(ctx context.Context) (*RollerCoaster, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RollerCoasterCreate) createSpec() (*RollerCoaster, *sqlgraph.CreateSpec) {
	var (
		_node = &RollerCoaster{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(rollercoaster.Table, sqlgraph.NewFieldSpec(rollercoaster.FieldID, field.TypeInt))
	)
	if value, ok := rcc.mutation.Name(); ok {
		_spec.SetField(rollercoaster.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rcc.mutation.Location(); ok {
		_spec.SetField(rollercoaster.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := rcc.mutation.Height(); ok {
		_spec.SetField(rollercoaster.FieldHeight, field.TypeFloat64, value)
		_node.Height = value
	}
	if value, ok := rcc.mutation.Speed(); ok {
		_spec.SetField(rollercoaster.FieldSpeed, field.TypeFloat64, value)
		_node.Speed = value
	}
	return _node, _spec
}

// RollerCoasterCreateBulk is the builder for creating many RollerCoaster entities in bulk.
type RollerCoasterCreateBulk struct {
	config
	err      error
	builders []*RollerCoasterCreate
}

// Save creates the RollerCoaster entities in the database.
func (rccb *RollerCoasterCreateBulk) Save(ctx context.Context) ([]*RollerCoaster, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RollerCoaster, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RollerCoasterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RollerCoasterCreateBulk) SaveX(ctx context.Context) []*RollerCoaster {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RollerCoasterCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RollerCoasterCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}
